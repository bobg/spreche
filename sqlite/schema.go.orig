package sqlite

import (
	"context"
	"database/sql"

	_ "github.com/mattn/go-sqlite3"
	"github.com/pkg/errors"

	"spreche"
)

const schema = `
CREATE TABLE IF NOT EXISTS channels (
  tenant_id INTEGER NOT NULL,
  channel_id TEXT NOT NULL,
  owner TEXT NOT NULL,
  repo TEXT NOT NULL,
  pr INTEGER NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS channel_id_index ON channels (tenant_id, channel_id);
CREATE UNIQUE INDEX IF NOT EXISTS owner_repo_pr_index ON channels (tenant_id, owner, repo, pr);

CREATE TABLE IF NOT EXISTS comments (
  tenant_id INTEGER NOT NULL,
  channel_id TEXT NOT NULL,
  thread_timestamp TEXT NOT NULL,
  comment_id INTEGER NOT NULL,
  PRIMARY KEY (tenant_id, channel_id, thread_timestamp)
);

CREATE INDEX IF NOT EXISTS channel_comment_index ON comments (tenant_id, channel_id, comment_id);

CREATE TABLE IF NOT EXISTS tenants (
  tenant_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  gh_installation_id INTEGER NOT NULL,
  gh_priv_key BLOB NOT NULL,
  gh_api_url TEXT NOT NULL,
  gh_upload_url TEXT NOT NULL,
  slack_token TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS tenant_repos (
  repo_url TEXT NOT NULL PRIMARY KEY,
  tenant_id INTEGER NOT NULL REFERENCES tenants (tenant_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS tenant_teams (
  team_id TEXT NOT NULL PRIMARY KEY,
  tenant_id INTEGER NOT NULL REFERENCES tenants (tenant_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users (
  tenant_id INTEGER NOT NULL,
  slack_id TEXT NOT NULL,
  github_name TEXT NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS slack_id_index ON users (tenant_id, slack_id);
CREATE UNIQUE INDEX IF NOT EXISTS github_name_index ON users (tenant_id, github_name);
`

type Stores struct {
	Channels spreche.ChannelStore
	Comments spreche.CommentStore
	Tenants  spreche.TenantStore
	Users    spreche.UserStore

	db *sql.DB
}

func Open(ctx context.Context, conn string) (Stores, error) {
	db, err := sql.Open("sqlite3", conn)
	if err != nil {
		return Stores{}, errors.Wrapf(err, "opening %s", conn)
	}
	_, err = db.ExecContext(ctx, schema)
	if err != nil {
		db.Close()
		return Stores{}, errors.Wrap(err, "instantiating schema")
	}

	return Stores{
		Channels: channelStore{db: db},
		Comments: commentStore{db: db},
		Tenants:  tenantStore{db: db},
		Users:    userStore{db: db},
		db:       db,
	}, nil
}

func (s Stores) Close() error {
	return s.db.Close()
}
<<<<<<< HEAD
=======

type channelStore struct {
	db *sql.DB
}

var _ spreche.ChannelStore = channelStore{}

func (c channelStore) Add(ctx context.Context, tenantID int64, channelID string, repo *github.Repository, prnum int) error {
	const q = `INSERT INTO channels (tenant_id, channel_id, owner, repo, pr) VALUES ($1, $2, $3, $4, $5)`
	_, err := c.db.ExecContext(ctx, q, tenantID, channelID, *repo.Owner.Login, *repo.Name, prnum)
	return err
}

func (c channelStore) ByChannelID(ctx context.Context, tenantID int64, channelID string) (*spreche.Channel, error) {
	const q = `SELECT owner, repo, pr FROM channels WHERE tenant_id = $1 AND channel_id = $2`
	result := &spreche.Channel{
		ChannelID: channelID,
	}
	err := c.db.QueryRowContext(ctx, q, tenantID, channelID).Scan(&result.Owner, &result.Repo, &result.PR)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

func (c channelStore) ByRepoPR(ctx context.Context, tenantID int64, repo *github.Repository, prnum int) (*spreche.Channel, error) {
	const q = `SELECT channel_id FROM channels WHERE tenant_id = $1 AND owner = $2 AND repo = $3 AND pr = $4`
	result := &spreche.Channel{
		Owner: *repo.Owner.Login,
		Repo:  *repo.Name,
		PR:    prnum,
	}
	err := c.db.QueryRowContext(ctx, q, tenantID, *repo.Owner.Login, *repo.Name, prnum).Scan(&result.ChannelID)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

type commentStore struct {
	db *sql.DB
}

var _ spreche.CommentStore = &commentStore{}

func (c commentStore) ByCommentID(ctx context.Context, tenantID int64, channelID string, commentID int64) (*spreche.Comment, error) {
	const q = `SELECT thread_timestamp FROM comments WHERE tenant_id = $1 AND channel_id = $2 AND comment_id = $3`
	result := &spreche.Comment{
		ChannelID: channelID,
		CommentID: commentID,
	}
	err := c.db.QueryRowContext(ctx, q, tenantID, channelID, commentID).Scan(&result.ThreadTimestamp)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

func (c commentStore) ByThreadTimestamp(ctx context.Context, tenantID int64, channelID, timestamp string) (*spreche.Comment, error) {
	const q = `SELECT comment_id FROM comments WHERE tenant_id = $1 channel_id = $2 AND thread_timestamp = $3`
	result := &spreche.Comment{
		ChannelID:       channelID,
		ThreadTimestamp: timestamp,
	}
	err := c.db.QueryRowContext(ctx, q, tenantID, channelID, timestamp).Scan(&result.CommentID)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

func (c commentStore) Add(ctx context.Context, tenantID int64, channelID, timestamp string, commentID int64) error {
	const q = `INSERT INTO comments (tenant_id, channel_id, thread_timestamp, comment_id) VALUES ($1, $2, $3, $4)`
	_, err := c.db.ExecContext(ctx, q, tenantID, channelID, timestamp, commentID)
	return err
}

type tenantStore struct {
	db *sql.DB
}

var _ spreche.TenantStore = tenantStore{}

func (t tenantStore) WithTenant(ctx context.Context, tenantID int64, repoURL, teamID string, f func(context.Context, *spreche.Tenant) error) error {
	const (
		qTenantID = `
			SELECT gh_installation_id, gh_priv_key, gh_api_url, gh_upload_url, slack_token
				FROM tenants
				WHERE tenant_id = $1
		`
		qRepo = `
			SELECT r.tenant_id, t.gh_installation_id, t.gh_priv_key, t.gh_api_url, t.gh_upload_url, t.slack_token
				FROM tenant_repos r, tenants t
				WHERE r.tenant_id = t.tenant_id AND r.repo_url = $1
		`
		qTeam = `
			SELECT tt.tenant_id, t.gh_installation_id, t.gh_priv_key, t.gh_api_url, t.gh_upload_url, t.slack_token
				FROM tenant_teams tt, tenants t
				WHERE tt.tenant_id = t.tenant_id AND tt.team_id = $1
		`
	)

	var (
		q   string
		arg any
	)
	switch {
	case tenantID != 0:
		q, arg = qTenantID, tenantID
	case repoURL != "":
		q, arg = qRepo, repoURL
	case teamID != "":
		q, arg = qTeam, teamID
	default:
		return fmt.Errorf("WithTenant must be called with one of tenantID, repoURL, or teamID")
	}

	var tenant spreche.Tenant

	err := t.db.QueryRowContext(ctx, q, arg).Scan(
		&tenant.TenantID,
		&tenant.GHInstallationID,
		&tenant.GHPrivKey,
		&tenant.GHAPIURL,
		&tenant.GHUploadURL,
		&tenant.SlackToken,
	)
	if err != nil {
		return errors.Wrap(err, "getting tenant")
	}
	return f(ctx, &tenant)
}

func (t tenantStore) Add(ctx context.Context, vals *spreche.Tenant) error {
	const q = `INSERT INTO tenants (gh_installation_id, gh_priv_key, gh_api_url, gh_upload_url, slack_token) VALUES ($1, $2, $3, $4, $5)`
	res, err := t.db.ExecContext(ctx, q, vals.GHInstallationID, vals.GHPrivKey, vals.GHAPIURL, vals.GHUploadURL, vals.SlackToken)
	if err != nil {
		return errors.Wrap(err, "inserting tenant row")
	}
	vals.TenantID, err = res.LastInsertId()
	if err != nil {
		return errors.Wrap(err, "getting last insert ID")
	}

	for _, repoURL := range vals.RepoURLs {
		err = t.AddRepo(ctx, vals.TenantID, repoURL)
		if err != nil {
			return errors.Wrap(err, "adding repo URLs")
		}
	}

	for _, teamID := range vals.TeamIDs {
		err = t.AddTeam(ctx, vals.TenantID, teamID)
		if err != nil {
			return errors.Wrap(err, "adding team IDs")
		}
	}

	return nil
}

func (t tenantStore) AddRepo(ctx context.Context, tenantID int64, repoURL string) error {
	const q = `INSERT INTO tenant_repos (tenant_id, repo_url) VALUES ($1, $2)`
	_, err := t.db.ExecContext(ctx, q, tenantID, repoURL)
	return err
}

func (t tenantStore) AddTeam(ctx context.Context, tenantID int64, teamID string) error {
	const q = `INSERT INTO tenant_teams (tenant_id, team_id) VALUES ($1, $2)`
	_, err := t.db.ExecContext(ctx, q, tenantID, teamID)
	return err
}

func (t tenantStore) Foreach(ctx context.Context, f func(*spreche.Tenant) error) error {
	const q = `SELECT tenant_id, gh_installation_id, gh_priv_key, gh_api_url, gh_upload_url, slack_token FROM tenants`
	return sqlutil.ForQueryRows(ctx, t.db, q, func(tenantID, ghInstallationID int64, ghPrivKey []byte, ghAPIURL, ghUploadURL, slackToken string) error {
		var tenant = &spreche.Tenant{
			TenantID:         tenantID,
			GHInstallationID: ghInstallationID,
			GHPrivKey:        ghPrivKey,
			GHAPIURL:         ghAPIURL,
			GHUploadURL:      ghUploadURL,
			SlackToken:       slackToken,
		}

		const qRepos = `SELECT repo_url FROM tenant_repos WHERE tenant_id = $1`
		err := sqlutil.ForQueryRows(ctx, t.db, qRepos, tenantID, func(repoURL string) {
			tenant.RepoURLs = append(tenant.RepoURLs, repoURL)
		})
		if err != nil {
			return errors.Wrap(err, "getting repo URLs")
		}

		const qTeams = `SELECT team_id FROM tenant_teams WHERE tenant_id = $1`
		err = sqlutil.ForQueryRows(ctx, t.db, qTeams, tenantID, func(teamID string) {
			tenant.TeamIDs = append(tenant.TeamIDs, teamID)
		})
		if err != nil {
			return errors.Wrap(err, "getting team IDs")
		}

		return f(tenant)
	})
}

type userStore struct {
	db *sql.DB
}

var _ spreche.UserStore = &userStore{}

func (u userStore) BySlackID(ctx context.Context, tenantID int64, slackID string) (*spreche.User, error) {
	const q = `SELECT github_name FROM users WHERE tenant_id = $1 AND slack_id = $2`
	result := &spreche.User{
		SlackID: slackID,
	}
	err := u.db.QueryRowContext(ctx, q, tenantID, slackID).Scan(&result.GithubName)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

func (u userStore) ByGithubName(ctx context.Context, tenantID int64, githubName string) (*spreche.User, error) {
	const q = `SELECT slack_id FROM users WHERE tenant_id = $1 AND github_name = $2`
	result := &spreche.User{
		GithubName: githubName,
	}
	err := u.db.QueryRowContext(ctx, q, tenantID, githubName).Scan(&result.SlackID)
	if errors.Is(err, sql.ErrNoRows) {
		err = spreche.ErrNotFound
	}
	return result, err
}

func (u userStore) Add(ctx context.Context, tenantID int64, user *spreche.User) error {
	const q = `INSERT INTO users (tenant_id, slack_id, github_name) VALUES ($1, $2, $3)`
	_, err := u.db.ExecContext(ctx, q, tenantID, user.SlackID, user.GithubName)
	return err
}
>>>>>>> be528c2ce8fa1767874fedb06e38b0e8bd809ba6
